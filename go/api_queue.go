/*
 * queueservice
 *
 * Video queue service
 *
 * API version: 0.0.1
 * Contact: sbirudavolu@umass.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A QueueApiController binds http requests to an api service and writes the service results to the http response
type QueueApiController struct {
	service QueueApiServicer
}

// NewQueueApiController creates a default api controller
func NewQueueApiController(s QueueApiServicer) Router {
	return &QueueApiController{service: s}
}

// Routes returns all of the api route for the QueueApiController
func (c *QueueApiController) Routes() Routes {
	return Routes{
		{
			"AddVideo",
			strings.ToUpper("Post"),
			"/v1/queue/{code}/add",
			c.AddVideo,
		},
		{
			"PlayVideo",
			strings.ToUpper("Post"),
			"/v1/queue/{code}/play",
			c.PlayVideo,
		},
		{
			"RemoveVideo",
			strings.ToUpper("Post"),
			"/v1/queue/{code}/remove",
			c.RemoveVideo,
		},
	}
}

// AddVideo - Add video to the queue
func (c *QueueApiController) AddVideo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	code := params["code"]
	addVideoRequest := &AddVideoRequest{}
	if err := json.NewDecoder(r.Body).Decode(&addVideoRequest); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.AddVideo(code, *addVideoRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PlayVideo - Remove video from the queue
func (c *QueueApiController) PlayVideo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	code := params["code"]
	playVideo := &PlayVideo{}
	if err := json.NewDecoder(r.Body).Decode(&playVideo); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.PlayVideo(code, *playVideo)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RemoveVideo - Remove video from the queue
func (c *QueueApiController) RemoveVideo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	code := params["code"]
	removeVideo := &RemoveVideo{}
	if err := json.NewDecoder(r.Body).Decode(&removeVideo); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RemoveVideo(code, *removeVideo)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
