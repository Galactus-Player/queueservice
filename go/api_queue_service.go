/*
 * queueservice
 *
 * Video queue service
 *
 * API version: 0.0.1
 * Contact: sbirudavolu@umass.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"crypto/sha256"
	b64 "encoding/base64"
	"fmt"
	"log"
	"net/url"
	"time"
)

// QueueApiService is a service that implents the logic for the QueueApiServicer
// This service should implement the business logic for every endpoint for the QueueApi API.
// Include any external packages or services that will be required by this service.
type QueueApiService struct {
	db *Database
}

// NewQueueApiService creates a default api service
func NewQueueApiService(db *Database) QueueApiServicer {
	return &QueueApiService{db: db}
}

// AddVideo - Add video to the queue
func (s *QueueApiService) AddVideo(code string, addVideoRequest AddVideoRequest) (interface{}, error) {
	thumbnail, err := getThumbnailUrl(addVideoRequest.Url)
	if err != nil {
		log.Fatal(err)
	}
	timestamp := time.Now()
	hash := sha256.Sum256([]byte(addVideoRequest.Url + timestamp.String()))
	videoId := b64.StdEncoding.EncodeToString(hash[:16])
	video := Video{Id: videoId, Url: addVideoRequest.Url, AddedAt: timestamp, ThumbnailUrl: thumbnail, Index: 1}
	err = s.db.InsertNewVideo(code, video)
	if err != nil {
		log.Printf("Error: %+v\n", err)
		return nil, err
	}
	return video, nil
}

func getThumbnailUrl(videoUrl string) (string, error) {
	u, err := url.Parse(videoUrl)
	if err != nil {
		return "", err
	}
	q := u.Query()
	videoId := q.Get("v")

	thumb := fmt.Sprintf("https://img.youtube.com/vi/%s/0.jpg", videoId)
	return thumb, nil
}

// PlayVideo - Move video to top of queue
func (s *QueueApiService) PlayVideo(code string, playVideo PlayVideo) (interface{}, error) {
	result, err := s.db.IncQueueCounter(code)
	if err != nil {
		log.Fatal(err)
		return VideoQueue{Room: code}, err
	}

	result, err = s.db.UpdateVideoIndex(code, playVideo.Id, int(result.Counter))
	return result, nil
}

// RemoveVideo - Remove video from the queue
func (s *QueueApiService) RemoveVideo(code string, removeVideo RemoveVideo) (interface{}, error) {
	err := s.db.DeleteVideo(code, removeVideo.Id)
	if err != nil {
		return nil, err
	}
	return removeVideo, nil
}
