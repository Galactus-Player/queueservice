/*
 * queueservice
 *
 * Video queue service
 *
 * API version: 0.0.1
 * Contact: sbirudavolu@umass.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"crypto/sha256"
	"fmt"
	"log"
	"net/url"
	"time"
)

// QueueApiService is a service that implents the logic for the QueueApiServicer
// This service should implement the business logic for every endpoint for the QueueApi API.
// Include any external packages or services that will be required by this service.
type QueueApiService struct {
}

// NewQueueApiService creates a default api service
func NewQueueApiService() QueueApiServicer {
	return &QueueApiService{}
}

// AddVideo - Add video to the queue
func (s *QueueApiService) AddVideo(code string, addVideoRequest AddVideoRequest) (interface{}, error) {
	// TODO - update AddVideo with the required logic for this service method.
	// Add api_queue_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	thumbnail, err := getThumbnailUrl(addVideoRequest.Url)
	if err != nil {
		log.Fatal(err)
	}
	videoId := sha256.Sum256([]byte(addVideoRequest.Url))
	result := Video{Id: string(videoId[:]), Url: addVideoRequest.Url, AddedAt: time.Now(), ThumbnailUrl: thumbnail}
	return result, nil
}

func getThumbnailUrl(videoUrl string) (string, error) {
	u, err := url.Parse(videoUrl)
	if err != nil {
		return "", err
	}
	q := u.Query()
	videoId := q.Get("v")

	thumb := fmt.Sprintf("https://img.youtube.com/vi/%s/0.jpg", videoId)
	return thumb, nil
}
